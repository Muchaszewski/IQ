//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace InventoryQuest.InventoryQuest.Components.ActionEvents
{
	public class ActionEventManager 
	{
	
		//Attack
		public static EventHandler OnAttack = delegate { };
		public static void OnAttack_Invoke()
		{
			 OnAttack.Invoke(null, EventArgs.Empty);
		}
		public static class Attack 
		{

			public static EventHandler OnClick = delegate { };
			public static void OnClick_Invoke()
			{
				 OnClick.Invoke(null, EventArgs.Empty);
			}

			public static EventHandler OnMeeleAttack = delegate { };
			public static void OnMeeleAttack_Invoke()
			{
				 OnMeeleAttack.Invoke(null, EventArgs.Empty);
			}
			public static class MeeleAttack 
			{
				public static EventHandler OnCriticalStrike = delegate { };
				public static void OnCriticalStrike_Invoke()
				{
					 OnCriticalStrike.Invoke(null, EventArgs.Empty);
				}
				public static EventHandler OnSucces = delegate { };
				public static void OnSucces_Invoke()
				{
					 OnSucces.Invoke(null, EventArgs.Empty);
				}

				public static EventHandler OnFail = delegate { };
				public static void OnFail_Invoke()
				{
					 OnFail.Invoke(null, EventArgs.Empty);
				}
			}

			public static EventHandler OnRangeAttack = delegate { };
			public static void OnRangeAttack_Invoke()
			{
				 OnRangeAttack.Invoke(null, EventArgs.Empty);
			}
			public static class RangeAttack 
			{
				public static EventHandler OnCriticalStrike = delegate { };
				public static void OnCriticalStrike_Invoke()
				{
					 OnCriticalStrike.Invoke(null, EventArgs.Empty);
				}
				public static EventHandler OnSucces = delegate { };
				public static void OnSucces_Invoke()
				{
					 OnSucces.Invoke(null, EventArgs.Empty);
				}

				public static EventHandler OnFail = delegate { };
				public static void OnFail_Invoke()
				{
					 OnFail.Invoke(null, EventArgs.Empty);
				}
			}

			public static EventHandler OnSpellCast = delegate { };
			public static void OnSpellCast_Invoke()
			{
				 OnSpellCast.Invoke(null, EventArgs.Empty);
			}
			public static class SpellCast 
			{
				public static EventHandler OnCriticalStrike = delegate { };
				public static void OnCriticalStrike_Invoke()
				{
					 OnCriticalStrike.Invoke(null, EventArgs.Empty);
				}
				public static EventHandler OnSucces = delegate { };
				public static void OnSucces_Invoke()
				{
					 OnSucces.Invoke(null, EventArgs.Empty);
				}

				public static EventHandler OnFail = delegate { };
				public static void OnFail_Invoke()
				{
					 OnFail.Invoke(null, EventArgs.Empty);
				}
			}

			public static EventHandler OnDealingDamage = delegate { };
			public static void OnDealingDamage_Invoke()
			{
				 OnDealingDamage.Invoke(null, EventArgs.Empty);
			}
			public static class DealingDamage 
			{
					public static EventHandler OnPhysical = delegate { };
					public static void OnPhysical_Invoke()
					{
						 OnPhysical.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnFire = delegate { };
					public static void OnFire_Invoke()
					{
						 OnFire.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnCold = delegate { };
					public static void OnCold_Invoke()
					{
						 OnCold.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnLightning = delegate { };
					public static void OnLightning_Invoke()
					{
						 OnLightning.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnPoison = delegate { };
					public static void OnPoison_Invoke()
					{
						 OnPoison.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnArcane = delegate { };
					public static void OnArcane_Invoke()
					{
						 OnArcane.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnLight = delegate { };
					public static void OnLight_Invoke()
					{
						 OnLight.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnDark = delegate { };
					public static void OnDark_Invoke()
					{
						 OnDark.Invoke(null, EventArgs.Empty);
					}
			}
		}
	
		//Defend
		public static EventHandler OnDefend = delegate { };
		public static void OnDefend_Invoke()
		{
			 OnDefend.Invoke(null, EventArgs.Empty);
		}
		public static class Defend 
		{

			public static EventHandler OnParry = delegate { };
			public static void OnParry_Invoke()
			{
				 OnParry.Invoke(null, EventArgs.Empty);
			}
			public static class Parry 
			{
				public static EventHandler OnSucces = delegate { };
				public static void OnSucces_Invoke()
				{
					 OnSucces.Invoke(null, EventArgs.Empty);
				}

				public static EventHandler OnFail = delegate { };
				public static void OnFail_Invoke()
				{
					 OnFail.Invoke(null, EventArgs.Empty);
				}
			}

			public static EventHandler OnBlock = delegate { };
			public static void OnBlock_Invoke()
			{
				 OnBlock.Invoke(null, EventArgs.Empty);
			}
			public static class Block 
			{
				public static EventHandler OnSucces = delegate { };
				public static void OnSucces_Invoke()
				{
					 OnSucces.Invoke(null, EventArgs.Empty);
				}

				public static EventHandler OnFail = delegate { };
				public static void OnFail_Invoke()
				{
					 OnFail.Invoke(null, EventArgs.Empty);
				}
			}

			public static EventHandler OnEvade = delegate { };
			public static void OnEvade_Invoke()
			{
				 OnEvade.Invoke(null, EventArgs.Empty);
			}
			public static class Evade 
			{
				public static EventHandler OnSucces = delegate { };
				public static void OnSucces_Invoke()
				{
					 OnSucces.Invoke(null, EventArgs.Empty);
				}

				public static EventHandler OnFail = delegate { };
				public static void OnFail_Invoke()
				{
					 OnFail.Invoke(null, EventArgs.Empty);
				}
			}

			public static EventHandler OnTakingDamage = delegate { };
			public static void OnTakingDamage_Invoke()
			{
				 OnTakingDamage.Invoke(null, EventArgs.Empty);
			}
			public static class TakingDamage 
			{
					public static EventHandler OnPhysical = delegate { };
					public static void OnPhysical_Invoke()
					{
						 OnPhysical.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnFire = delegate { };
					public static void OnFire_Invoke()
					{
						 OnFire.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnCold = delegate { };
					public static void OnCold_Invoke()
					{
						 OnCold.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnLightning = delegate { };
					public static void OnLightning_Invoke()
					{
						 OnLightning.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnPoison = delegate { };
					public static void OnPoison_Invoke()
					{
						 OnPoison.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnArcane = delegate { };
					public static void OnArcane_Invoke()
					{
						 OnArcane.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnLight = delegate { };
					public static void OnLight_Invoke()
					{
						 OnLight.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnDark = delegate { };
					public static void OnDark_Invoke()
					{
						 OnDark.Invoke(null, EventArgs.Empty);
					}
			}
		}
	
		//Regen
		public static EventHandler OnRegen = delegate { };
		public static void OnRegen_Invoke()
		{
			 OnRegen.Invoke(null, EventArgs.Empty);
		}
		public static class Regen 
		{

			public static EventHandler OnHealthRegen = delegate { };
			public static void OnHealthRegen_Invoke()
			{
				 OnHealthRegen.Invoke(null, EventArgs.Empty);
			}
			public static class HealthRegen 
			{
					public static EventHandler OnBegin = delegate { };
					public static void OnBegin_Invoke()
					{
						 OnBegin.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnEnd = delegate { };
					public static void OnEnd_Invoke()
					{
						 OnEnd.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnBreak = delegate { };
					public static void OnBreak_Invoke()
					{
						 OnBreak.Invoke(null, EventArgs.Empty);
					}
			}

			public static EventHandler OnManaRegen = delegate { };
			public static void OnManaRegen_Invoke()
			{
				 OnManaRegen.Invoke(null, EventArgs.Empty);
			}
			public static class ManaRegen 
			{
					public static EventHandler OnBegin = delegate { };
					public static void OnBegin_Invoke()
					{
						 OnBegin.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnEnd = delegate { };
					public static void OnEnd_Invoke()
					{
						 OnEnd.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnBreak = delegate { };
					public static void OnBreak_Invoke()
					{
						 OnBreak.Invoke(null, EventArgs.Empty);
					}
			}

			public static EventHandler OnStaminaRegen = delegate { };
			public static void OnStaminaRegen_Invoke()
			{
				 OnStaminaRegen.Invoke(null, EventArgs.Empty);
			}
			public static class StaminaRegen 
			{
					public static EventHandler OnBegin = delegate { };
					public static void OnBegin_Invoke()
					{
						 OnBegin.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnEnd = delegate { };
					public static void OnEnd_Invoke()
					{
						 OnEnd.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnBreak = delegate { };
					public static void OnBreak_Invoke()
					{
						 OnBreak.Invoke(null, EventArgs.Empty);
					}
			}
		}
	
		//Item
		public static class Item 
		{

			public static EventHandler OnGet = delegate { };
			public static void OnGet_Invoke()
			{
				 OnGet.Invoke(null, EventArgs.Empty);
			}

			public static EventHandler OnDrop = delegate { };
			public static void OnDrop_Invoke()
			{
				 OnDrop.Invoke(null, EventArgs.Empty);
			}

			public static EventHandler OnEquip = delegate { };
			public static void OnEquip_Invoke()
			{
				 OnEquip.Invoke(null, EventArgs.Empty);
			}
			public static class Equip 
			{
				public static EventHandler OnSucces = delegate { };
				public static void OnSucces_Invoke()
				{
					 OnSucces.Invoke(null, EventArgs.Empty);
				}

				public static EventHandler OnFail = delegate { };
				public static void OnFail_Invoke()
				{
					 OnFail.Invoke(null, EventArgs.Empty);
				}
			}

			public static EventHandler OnBuy = delegate { };
			public static void OnBuy_Invoke()
			{
				 OnBuy.Invoke(null, EventArgs.Empty);
			}
			public static class Buy 
			{
				public static EventHandler OnSucces = delegate { };
				public static void OnSucces_Invoke()
				{
					 OnSucces.Invoke(null, EventArgs.Empty);
				}

				public static EventHandler OnFail = delegate { };
				public static void OnFail_Invoke()
				{
					 OnFail.Invoke(null, EventArgs.Empty);
				}
			}

			public static EventHandler OnSell = delegate { };
			public static void OnSell_Invoke()
			{
				 OnSell.Invoke(null, EventArgs.Empty);
			}
		}
	
		//Misc
		public static class Misc 
		{

			public static EventHandler OnSave = delegate { };
			public static void OnSave_Invoke()
			{
				 OnSave.Invoke(null, EventArgs.Empty);
			}

			public static EventHandler OnLoad = delegate { };
			public static void OnLoad_Invoke()
			{
				 OnLoad.Invoke(null, EventArgs.Empty);
			}

			public static EventHandler OnNewCharacter = delegate { };
			public static void OnNewCharacter_Invoke()
			{
				 OnNewCharacter.Invoke(null, EventArgs.Empty);
			}
		}
	
		//Fight
		public static class Fight 
		{

			public static EventHandler OnWin = delegate { };
			public static void OnWin_Invoke()
			{
				 OnWin.Invoke(null, EventArgs.Empty);
			}

			public static EventHandler OnLose = delegate { };
			public static void OnLose_Invoke()
			{
				 OnLose.Invoke(null, EventArgs.Empty);
			}

			public static EventHandler OnItemFound = delegate { };
			public static void OnItemFound_Invoke()
			{
				 OnItemFound.Invoke(null, EventArgs.Empty);
			}

			public static EventHandler OnEnemiesFound = delegate { };
			public static void OnEnemiesFound_Invoke()
			{
				 OnEnemiesFound.Invoke(null, EventArgs.Empty);
			}
			public static class EnemiesFound 
			{
					public static EventHandler OnCommon = delegate { };
					public static void OnCommon_Invoke()
					{
						 OnCommon.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnUncommon = delegate { };
					public static void OnUncommon_Invoke()
					{
						 OnUncommon.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnRare = delegate { };
					public static void OnRare_Invoke()
					{
						 OnRare.Invoke(null, EventArgs.Empty);
					}
					public static EventHandler OnUnique = delegate { };
					public static void OnUnique_Invoke()
					{
						 OnUnique.Invoke(null, EventArgs.Empty);
					}
			}

			public static EventHandler OnLookingForEnemies = delegate { };
			public static void OnLookingForEnemies_Invoke()
			{
				 OnLookingForEnemies.Invoke(null, EventArgs.Empty);
			}

			public static EventHandler OnTravelPlanned = delegate { };
			public static void OnTravelPlanned_Invoke()
			{
				 OnTravelPlanned.Invoke(null, EventArgs.Empty);
			}

			public static EventHandler OnTravelBroke = delegate { };
			public static void OnTravelBroke_Invoke()
			{
				 OnTravelBroke.Invoke(null, EventArgs.Empty);
			}

			public static EventHandler OnTravelBegin = delegate { };
			public static void OnTravelBegin_Invoke()
			{
				 OnTravelBegin.Invoke(null, EventArgs.Empty);
			}

			public static EventHandler OnTravelEnd = delegate { };
			public static void OnTravelEnd_Invoke()
			{
				 OnTravelEnd.Invoke(null, EventArgs.Empty);
			}
		}
	}
}

